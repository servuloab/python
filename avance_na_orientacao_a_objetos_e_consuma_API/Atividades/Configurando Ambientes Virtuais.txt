Configurando Ambientes Virtuais em Python com venv
Com o VS Code aberto em um novo projeto, criaremos a venv. No terminal, passamos o comando python -m venv seguido do nome que queremos dar, nesse caso será venv mesmo.

python -m venv venv

Olhar esse video: https://www.youtube.com/watch?v=m1TYpvIYm74&ab_channel=Ot%C3%A1vioMiranda

comando: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned

Ao pressionar Enter, um alerta é emitido, indicando que um novo ambiente foi criado. A ferramenta pergunta se queremos selecioná-lo para a pasta do espaço de trabalho, clicamos no botão "Sim". Em seguida, o processo de criação do ambiente é iniciado, o qual pode demorar um pouco.

Ao concluir, o caminho do ambiente é exibido no terminal. Além disso, na lateral superior esquerda da tela, notamos que foi criada uma pasta chamada venv. Ao clicar nela, encontramos três outras pastas e um arquivo de pyvenv.cfg. O que são essas pastas, Gui?

Guilherme: Antes de falarmos sobre as pastas, retomaremos o comando que passamos no terminal. O -m indica que queremos criar um módulo de script, executar informações e utilizar esse script também. O venv indica que queremos criar uma venv e depois temos o nome.

Nesse caso, nomeamos de venv, pois é muito comum pegarmos outro projeto em Python no qual os ambientes são chamados de venv, env e assim por diante. Poderíamos dar outro nome, porém essa não é uma boa prática.

Agora, analisaremos as pastas criadas. A pasta "Include", por exemplo, mantém todo o cabeçalho, o código C especificamente, dos ambientes e dos módulos que precisamos que sejam inscritos no projeto.

Laís: Por padrão, essa pasta aparece vazia ao ser instalada. Isso também acontecerá com você.

A pasta lib é responsável por armazenar todos os pacotes e dependências que instalamos no ambiente virtual. Inicialmente, ela contém apenas o pip do Python, responsável por fazer todas as instalações, além de outra versão do pip. À medida que instalamos módulos ou dependências, eles serão adicionados a essa pasta.

Guilherme: Então, o "Include" manterá os módulos escritos em C e a "Lib" as bibliotecas e módulos do Python específico para o ambiente que temos.

A terceira pasta se chama "Scripts", dentro dela temos scripts relacionados ao ambiente virtual. Então, sempre que quisermos ativar um ambiente virtual, utilizaremos informações dentro dessa pasta.

Laís: Antes de utilizarmos o ambiente, precisamos ativá-lo, afinal, fizemos apenas a instalação.

Mas antes, temos o último arquivo de configuração chamado pyvenv.cfg. Esse arquivo, basicamente, só dará as informações do nosso ambiente virtual.

No momento, como código, temos onde ele está localizado, a versão Python que está utilizando. Nesse caso, se quiséssemos alterar a versão do Python ou criar com outra versão, poderíamos. Assim, até o próprio executável que está dentro desse script mudaria. Além disso, também temos informações de executável, comando e assim por diante.

Para ativar o ambiente virtual, precisaremos acessar o terminal.

Guilherme: Podemos até ver o script que vamos executar. Na lateral esquerda da ferramenta, temos o script activate.bat e o activate.ps1.

Informação importante: a ativação vai mudar conforme o sistema operacional. No Linux e no Mac vai ser de uma forma, no Windows será de outra. Mostraremos primeiro a do Windows, depois falamos sobre a ativação no Mac.

Laís: Para você conseguir ativar o seu ambiente virtual no Windows, basta acessarmos esse arquivo e pedirmos para ele executar no terminal do Python.

Para isso, vamos até o diretório desse arquivo. Então digitamos ./venv/Scripts/activate.

./venv/Scripts/activate

Feito isso, temos o retorno abaixo:

(venv) C:\Users\Lais\Desktop\oo-sabor-express

Perceba que, antes do caminho, já mostra que a venv está ativada, ela aparece entre parênteses, logo no início. Se tivéssemos colocado o nome da venv como ambiente ou outra coisa, estaria exatamente esse nome aqui. Você pode até testar na sua máquina se preferir, mas por padrão, por convenção, utilizamos venv.

Como você falou, Laís, para sabermos se a venv foi ativada ou não, é quando temos esse nome venv logo no início do caminho.

Laís: Você não precisa se preocupar em decorar esse comando, porque como falamos anteriormente, você pode procurar onde está esse arquivo de ativação e ativá-lo pelo terminal utilizando esses comandos que utilizamos.

Guilherme: Agora, seria interessante mostrar esse ambiente sendo desativado, afinal, isso é comum no dia a dia de trabalho em que trabalhamos em um projeto, entramos no ambiente virtual, desativamos e depois entramos em outro.

Laís: Para desativar um ambiente virtual, tanto no Windows, quanto Linux e Mac, digitamos deactivate seguido de "Enter".

deactivate

Feito isso, voltamos para o diretório utilizado anteriormente.

C:\Users\Lais\Desktop\oo-sabor-express

Guilherme: A prova de que deu certo é que sai o venv do caminho.

Laís: Agora, ativaremos novamente. Para facilitar, como já digitamos esse comando anteriormente, pressionamos a seta para cima e "Enter".

./venv/Scripts/activate

Agora podemos trabalhar com a nossa venv.

Guilherme: Instalaremos alguns módulos na sequência!

Instalação de bibliotecas e isolamento de dependências
Para instalar, faremos o mesmo processo que realizamos para instalar qualquer coisa com o pip. No terminal, passamos pip install seguido do nome da biblioteca ou módulo, nesse caso requests.

Guilherme: O pip é um gerenciador de módulos e pacotes do Python, ele é similar ao npm do JavaScript. A maioria das linguagens tem um gerenciador que auxilia nisso.

No caso do Python, existe mais de um, mas o pip é o mais conhecido. Então, quando falamos pip install ou pip uninstall para colocar ou remover um pacote, passamos só depois do nome do pacote.

Laís: O pip vem por padrão quando instalamos o Python na máquina.

Sabendo disso e após digitar o comando, apetamos "Enter". Lembrando que como estamos instalando, esse processo demora um pouco para carregar. Nisso, conseguimos visualizar no terminal as informações de download.

Após concluir a instalação, a ferramenta fala que esse pip está desatualizado. Como nesse momento não precisamos que ele seja atualizado, não faremos.

Como podemos conferir se o pacote foi realmente instalado?

Guilherme: Existe um comando chamado pip freeze que lista tudo o que temos dentro desse módulo.

pip freeze

Quando apertamos o "Enter", percebemos que vai ter mais de uma informação.

(venv) C:\Users\Lais\Desktop\oo-sabor-express>pip freeze

certifi==2023.11.17

charset-normalizer==3.3.2

idna==3.6

requests==2.31.0

urllib3==2.1.0

(venv) C:\Users\Lais\Desktop\oo-sabor-express>

Solicitamos para instalar o request, mas o request também precisa desses outros pacotes que estão listados. Isso é muito importante, pois, por exemplo, temos o pacote idna==3.6, se a versão 3.7 quebra, garantimos que no nosso projeto será a versão 3.6, a versão importante necessária para executar o projeto em específico.

Um ponto importante é que podemos até para listar esses pacotes que instalamos, essa é uma boa prática. Podemos colocar, por exemplo, pip freeze >. Em seguida, precisamos informar para criar um arquivo .txt listando tudo que temos instalado. Por convenção, o nome desse arquivo é requirements.txt.

pip freeze > requirements.txt

Laís: É Automaticamente gerado o arquivo .txt, que encontramos no explorador, na lateral esquerda da ferramenta. Ao abri-lo, encontramos todas as informações do pip freeze.

certifi==2023.11.17
charset-normalizer==3.3.2
idna==3.6
requests==2.31.0
urllib3==2.1.0

Utilizaremos essas informações em breve. Antes disso, acessamos a pasta "Lib". Antes, tínhamos somente o pip, agora temos tudo instalado. Dessa forma, podemos identificar, manualmente, se a instalação deu certo analisando o que está na pasta.

Guilherme: Faremos uma prova real. Falamos sobre o ambiente virtual, o criamos e instalamos o request. Isso quer dizer que no nosso sistema operacional, se desativarmos o ambiente virtual, não teremos o request nem os outros pacotes.

Laís: Então, colocaremos o comando que usamos anteriormente pip freeze.

pip freeze

Guilherme: Feito isso, não temos nada. Conseguimos isolar tudo que é necessário para esse projeto, com o request e os módulos que precisa para funcionar dentro desse ambiente.

Laís: Se estivesse instalado na nossa máquina, não seria necessariamente a mesma versão. Eventualmente, se estivéssemos puxando sem querer do nosso computador, poderia dar um conflito entre as versões que estamos utilizando, fazendo com que o projeto não funcionasse.

Então, percebemos que o ambiente está realmente isolando todas as dependências que estamos instalando. Assim, podemos trabalhar de modo mais seguro, sem essa preocupação.